const puppeteer = require('puppeteer');
const fs = require('fs');
const path = require('path');
const jsonFilePath = path.join(__dirname, '/dataset/pwnableChallenges.json'); // Path to the JSON file
// Function to read the existing JSON data from the file
function readJsonFile(filePath) {
  try {
    const fileContent = fs.readFileSync(filePath, 'utf8');
    return JSON.parse(fileContent);
  } catch (error) {
    // If the file does not exist or cannot be read, return an empty object
    console.log(`${error}`);
    console.log(`KILL THIS PANE! \n`);

    return {};
  }
}
// Function to write data to the JSON file
function writeJsonFile(filePath, data) {
  fs.writeFileSync(filePath, JSON.stringify(data, null, 2));
}
(async () => {
  // Launch the browser
  const browser = await puppeteer.launch();
  const url = 'http://pwnable.kr/play.php'; // Replace with the actual URL
  // Read the existing data from the JSON file
  const existingData = readJsonFile(jsonFilePath);
  // Function to handle each figure
  async function handleFigure(index) {
    const page = await browser.newPage();
    await page.goto(url);
    console.log(`Processing figure ${index}`);

    // Click on the figure that calls onLayer(index)
    await page.click(`img[onclick="onLayer(${index});"]`);
    // Wait for the div with id="layerPop${index}" to become visible
    console.log(`Waiting for #layerPop${index} to become visible`);

    // Wait for selector
    await page.waitForSelector(`#layerPop${index}`, { visible: true });
    console.log(`#layerPop${index} is now visible`);

    // Extract the text from the textarea within the div
    const textContent = await page.$eval(`#layerPop${index} textarea`, textarea => textarea.value);
    console.log(`Text content of #layerPop${index}: ${textContent}`);

    // Close the page
    await page.close();
    // Return the extracted text
    return { [`layerPop${index}`]: textContent };
  }
  // Assuming there are n figures, replace n with the actual number of figures
  const n = 10; // Example: 10 figures
  const figurePromises = [];
  for (let i = 1; i <= n; i++) {
    figurePromises.push(handleFigure(i));
  }
  // Wait for all promises to resolve
  const results = await Promise.all(figurePromises);
  // Combine results with the existing data
  const combinedData = { ...existingData, ...results.reduce((acc, result) => ({ ...acc, ...result }), {}) };
  // Write the updated data to the JSON file
  writeJsonFile(jsonFilePath, combinedData);
  // Close the browser
  await browser.close();
})();
